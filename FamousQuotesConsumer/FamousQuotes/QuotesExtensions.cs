// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using FamousQuotesConsumer;
using FamousQuotesConsumer.Models;
using Microsoft.Rest;

namespace FamousQuotesConsumer
{
    public static partial class QuotesExtensions
    {
        /// <param name='operations'>
        /// Reference to the FamousQuotesConsumer.IQuotes.
        /// </param>
        public static IList<Quote> Get(this IQuotes operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQuotes)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the FamousQuotesConsumer.IQuotes.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Quote>> GetAsync(this IQuotes operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<FamousQuotesConsumer.Models.Quote>> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the FamousQuotesConsumer.IQuotes.
        /// </param>
        /// <param name='author'>
        /// Required.
        /// </param>
        public static IList<Quote> GetQuotesByAuthor(this IQuotes operations, string author)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQuotes)s).GetQuotesByAuthorAsync(author);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the FamousQuotesConsumer.IQuotes.
        /// </param>
        /// <param name='author'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Quote>> GetQuotesByAuthorAsync(this IQuotes operations, string author, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<FamousQuotesConsumer.Models.Quote>> result = await operations.GetQuotesByAuthorWithOperationResponseAsync(author, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the FamousQuotesConsumer.IQuotes.
        /// </param>
        public static Quote GetRandomQuote(this IQuotes operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQuotes)s).GetRandomQuoteAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the FamousQuotesConsumer.IQuotes.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Quote> GetRandomQuoteAsync(this IQuotes operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<FamousQuotesConsumer.Models.Quote> result = await operations.GetRandomQuoteWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
